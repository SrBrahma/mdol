import { removeAllMetaTags, removeTag } from './removeTag';

const file1 = `Hi!
<!--$ !about built with mdol /-->
<!--$ prop -->
<!--/$ prop -->
<!--$ prop -->
<!--$ !warn Do not edit this file /-->
<!--/$ prop -->
<!--$ prop /-->
Bye!`;

test('remove first opener "prop" tag', () => {
  expect(removeTag(file1, 'prop', {
    style: 'open',
    type: 'none',
  })).toBe(`Hi!
<!--$ !about built with mdol /-->
<!--/$ prop -->
<!--$ prop -->
<!--$ !warn Do not edit this file /-->
<!--/$ prop -->
<!--$ prop /-->
Bye!`);
});

test('remove first closer "prop" tag', () => {
  expect(removeTag(file1, 'prop', {
    style: 'close',
    type: 'none',
  })).toBe(`Hi!
<!--$ !about built with mdol /-->
<!--$ prop -->
<!--$ prop -->
<!--$ !warn Do not edit this file /-->
<!--/$ prop -->
<!--$ prop /-->
Bye!`);
});

test('remove all opener "prop" tags', () => {
  expect(removeTag(file1, 'prop', {
    style: 'open',
    type: 'none',
    removeAll: true,
  })).toBe(`Hi!
<!--$ !about built with mdol /-->
<!--/$ prop -->
<!--$ !warn Do not edit this file /-->
<!--/$ prop -->
<!--$ prop /-->
Bye!`);
});

/** Note that it is of type 'none', so it will remove the <!--$ prop /--> */
test("remove self closing 'prop' 'none' tag", () => {
  expect(removeTag(file1, 'prop', {
    style: 'selfClose',
    type: 'none',
  })).toBe(`Hi!
<!--$ !about built with mdol /-->
<!--$ prop -->
<!--/$ prop -->
<!--$ prop -->
<!--$ !warn Do not edit this file /-->
<!--/$ prop -->
Bye!`);
});

test('remove meta tag (warn tag)', () => {
  expect(removeTag(file1, 'warn.*?', {
    style: 'selfClose',
    type: 'meta',
  })).toBe(`Hi!
<!--$ !about built with mdol /-->
<!--$ prop -->
<!--/$ prop -->
<!--$ prop -->
<!--/$ prop -->
<!--$ prop /-->
Bye!`);
});


test('remove all meta tags', () => {
  expect(removeAllMetaTags(file1)).toBe(`Hi!
<!--$ prop -->
<!--/$ prop -->
<!--$ prop -->
<!--/$ prop -->
<!--$ prop /-->
Bye!`);
});


test('remove prop with and without escapeProp', () => {
  const fileContent = '<!--$ a.b({c: "Hi?!"}) -->';
  const prop = 'a.b({c: "Hi?!"})';
  expect(removeTag(fileContent, prop, {
    style: 'open',
    type: 'none',
    escapeProp: true,
  })).toBe('');
  expect(removeTag(fileContent, prop, {
    style: 'open',
    type: 'none',
    escapeProp: false,
  })).toBe(fileContent);
});